name: Version Scrubbing Plugin

on:
  push:
    branches: [main, develop]
    paths:
      - "src/plugins/version-scrubbing/**"
      - ".github/workflows/version-scrubbing-plugin.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/plugins/version-scrubbing/**"
  schedule:
    # Run daily at 6 AM UTC to check for version updates
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      check_type:
        description: "Type of version check to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - runtimes
          - package-managers
          - frameworks

jobs:
  test-plugin:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run plugin tests
        run: npm test -- src/plugins/version-scrubbing

      - name: Build plugin
        run: npm run build

  version-check:
    runs-on: ubuntu-latest
    needs: test-plugin
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run version checks
        id: version_check
        run: |
          # This will be implemented once the plugin is complete
          echo "Running version checks for: ${{ github.event.inputs.check_type || 'all' }}"
          # node dist/plugins/version-scrubbing/index.js --check-type="${{ github.event.inputs.check_type || 'all' }}"

      - name: Create version update issue
        if: steps.version_check.outputs.updates_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const updates = JSON.parse('${{ steps.version_check.outputs.updates }}' || '[]');

            if (updates.length === 0) return;

            const body = `## 🔄 Version Updates Available

            The automated version scrubbing plugin has detected new versions:

            ${updates.map(update => `
            ### ${update.name}
            - **Current:** ${update.current}
            - **Latest:** ${update.latest}
            - **Priority:** ${update.priority}
            - **Impact:** ${update.impact}

            ${update.recommendation}

            **Actions:**
            ${update.actions.map(action => `- ${action.description}`).join('\n')}
            `).join('\n')}

            ---

            **Automated check performed on:** ${new Date().toISOString()}
            **Check type:** ${{ github.event.inputs.check_type || 'scheduled' }}

            Please review these updates and create appropriate issues or PRs as needed.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Version Updates Available - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['version-update', 'automated', 'maintenance']
            });

  security-check:
    runs-on: ubuntu-latest
    needs: test-plugin
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run security checks
        id: security_check
        run: |
          # This will be implemented once the plugin is complete
          echo "Running security advisory checks"
          # node dist/plugins/version-scrubbing/index.js --security-check

      - name: Create security alert issue
        if: steps.security_check.outputs.vulnerabilities_found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const vulnerabilities = JSON.parse('${{ steps.security_check.outputs.vulnerabilities }}' || '[]');

            if (vulnerabilities.length === 0) return;

            const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical');
            const highVulns = vulnerabilities.filter(v => v.severity === 'high');

            const body = `## 🚨 Security Vulnerabilities Detected

            ${criticalVulns.length > 0 ? `### ⚠️ Critical Vulnerabilities (${criticalVulns.length})` : ''}
            ${criticalVulns.map(v => `
            - **${v.name}** ${v.version}: ${v.description}
              - CVE: ${v.cveId || 'N/A'}
              - Fixed in: ${v.fixedVersion || 'Unknown'}
            `).join('')}

            ${highVulns.length > 0 ? `### 🔴 High Severity Vulnerabilities (${highVulns.length})` : ''}
            ${highVulns.map(v => `
            - **${v.name}** ${v.version}: ${v.description}
              - CVE: ${v.cveId || 'N/A'}
              - Fixed in: ${v.fixedVersion || 'Unknown'}
            `).join('')}

            **Immediate action required for critical vulnerabilities!**

            ---
            **Automated security check performed on:** ${new Date().toISOString()}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['security', 'vulnerability', 'critical', 'automated']
            });
