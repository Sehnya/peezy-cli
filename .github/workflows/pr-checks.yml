name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-validation:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          disallowScopes: |
            release
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Run comprehensive checks
        run: |
          echo "üîç Running comprehensive PR validation..."

          # Run linting, tests, and build
          npm run check

          echo "‚úÖ All checks passed"

      - name: Test CLI functionality
        run: |
          echo "üß™ Testing CLI functionality..."

          # Test basic CLI commands
          node dist/index.js --version
          node dist/index.js --help
          node dist/index.js list --json
          node dist/index.js doctor --json

          # Test JSON output validation
          OUTPUT=$(node dist/index.js list --json)
          echo "$OUTPUT" | jq . > /dev/null || (echo "‚ùå Invalid JSON output" && exit 1)

          echo "‚úÖ CLI functionality tests passed"

      - name: Check for breaking changes
        run: |
          # Check if this PR might contain breaking changes
          if git diff --name-only origin/main...HEAD | grep -E "(src/types\.ts|src/registry\.ts|package\.json)" > /dev/null; then
            echo "‚ö†Ô∏è This PR modifies core files that might contain breaking changes"
            echo "Please ensure backward compatibility or update the version appropriately"
          fi

      - name: Analyze changed files
        run: |
          echo "üìã Files changed in this PR:"
          git diff --name-only origin/main...HEAD

          echo ""
          echo "üìä Change statistics:"
          git diff --stat origin/main...HEAD

  template-integrity:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check template integrity
        run: |
          echo "üîç Running comprehensive template integrity checks..."

          # Check all templates, not just when changed
          TEMPLATES_DIR="templates"
          FAILED_TEMPLATES=()

          if [ -d "$TEMPLATES_DIR" ]; then
            for template_path in "$TEMPLATES_DIR"/*; do
              if [ -d "$template_path" ]; then
                template=$(basename "$template_path")
                echo "Checking $template template..."
                
                # Basic structure checks
                if [ ! -f "$template_path/package.json" ]; then
                  echo "‚ùå Missing package.json in $template"
                  FAILED_TEMPLATES+=("$template")
                  continue
                fi
                
                # Validate package.json is valid JSON
                if ! jq . "$template_path/package.json" > /dev/null 2>&1; then
                  echo "‚ùå Invalid package.json in $template"
                  FAILED_TEMPLATES+=("$template")
                  continue
                fi
                
                # Check for required directories based on template type
                case $template in
                  "nextjs-fullstack")
                    [ -d "$template_path/src/components" ] || { echo "‚ùå Missing components dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -d "$template_path/src/app" ] || { echo "‚ùå Missing app dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -f "$template_path/next.config.js" ] || [ -f "$template_path/next.config.mjs" ] || { echo "‚ùå Missing Next.js config in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "express-fullstack")
                    [ -d "$template_path/src/client" ] || { echo "‚ùå Missing client dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -d "$template_path/src/server" ] || { echo "‚ùå Missing server dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "react-spa-advanced")
                    [ -d "$template_path/src/components" ] || { echo "‚ùå Missing components dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -d "$template_path/src/pages" ] || { echo "‚ùå Missing pages dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -f "$template_path/vite.config.ts" ] || [ -f "$template_path/vite.config.js" ] || { echo "‚ùå Missing Vite config in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "bun-react-tailwind"|"vite-vue-tailwind")
                    [ -d "$template_path/src" ] || { echo "‚ùå Missing src dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -f "$template_path/vite.config.ts" ] || [ -f "$template_path/vite.config.js" ] || { echo "‚ùå Missing Vite config in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "flask"|"fastapi")
                    [ -f "$template_path/app.py" ] || [ -f "$template_path/main.py" ] || [ -d "$template_path/src" ] || { echo "‚ùå Missing Python entry point in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -f "$template_path/requirements.txt" ] || { echo "‚ùå Missing requirements.txt in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "nextjs-app-router")
                    [ -d "$template_path/src/app" ] || { echo "‚ùå Missing app dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -f "$template_path/next.config.js" ] || [ -f "$template_path/next.config.mjs" ] || { echo "‚ùå Missing Next.js config in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "express-typescript")
                    [ -d "$template_path/src" ] || { echo "‚ùå Missing src dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -f "$template_path/tsconfig.json" ] || { echo "‚ùå Missing TypeScript config in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                  "flask-bun-hybrid")
                    [ -f "$template_path/app.py" ] || [ -f "$template_path/main.py" ] || [ -d "$template_path/backend" ] || { echo "‚ùå Missing Python backend in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    [ -d "$template_path/frontend" ] || [ -d "$template_path/client" ] || { echo "‚ùå Missing frontend dir in $template"; FAILED_TEMPLATES+=("$template"); continue; }
                    ;;
                esac
                
                # Check for common required files
                [ -f "$template_path/.gitignore" ] || { echo "‚ö†Ô∏è Missing .gitignore in $template (recommended)"; }
                [ -f "$template_path/README.md" ] || { echo "‚ö†Ô∏è Missing README.md in $template (recommended)"; }
                
                echo "‚úÖ $template structure is valid"
              fi
            done
            
            # Report results
            if [ ${#FAILED_TEMPLATES[@]} -gt 0 ]; then
              echo ""
              echo "‚ùå Template integrity check failed for: ${FAILED_TEMPLATES[*]}"
              exit 1
            else
              echo ""
              echo "‚úÖ All templates passed integrity checks"
            fi
          else
            echo "‚ö†Ô∏è Templates directory not found"
          fi

  version-consistency:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check version consistency
        run: |
          echo "üîç Checking version consistency across files..."

          # Get version from package.json
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          echo "üì¶ package.json version: $PACKAGE_VERSION"

          # Check CLI version string in src/index.ts
          if grep -q "\.version(\"$PACKAGE_VERSION\")" src/index.ts; then
            echo "‚úÖ CLI version string matches: $PACKAGE_VERSION"
          else
            echo "‚ùå CLI version string doesn't match package.json"
            echo "Expected: .version(\"$PACKAGE_VERSION\")"
            echo "Found in src/index.ts:"
            grep "\.version(" src/index.ts || echo "No version string found"
            exit 1
          fi

          # Check if version follows semver
          SEMVER_PATTERN='^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'
          if echo "$PACKAGE_VERSION" | grep -E "$SEMVER_PATTERN" > /dev/null; then
            echo "‚úÖ Version follows semantic versioning"
          else
            echo "‚ùå Version doesn't follow semantic versioning: $PACKAGE_VERSION"
            exit 1
          fi

  registry-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate template registry
        run: |
          echo "üîç Validating template registry..."

          # Build first to ensure TypeScript compiles
          npm run build

          # Test registry loading
          node -e "
            import('./dist/registry.js').then(({ registry, getOrderedTemplates }) => {
              console.log('üìã Registry loaded successfully');
              console.log('Templates found:', Object.keys(registry).length);
              
              const ordered = getOrderedTemplates();
              console.log('Ordered templates:', ordered.length);
              
              // Validate each template entry
              for (const [key, template] of Object.entries(registry)) {
                if (!template.title) {
                  console.error(\`‚ùå Template \${key} missing title\`);
                  process.exit(1);
                }
                
                if (typeof template.popular !== 'boolean') {
                  console.error(\`‚ùå Template \${key} missing or invalid popular flag\`);
                  process.exit(1);
                }
                
                console.log(\`‚úÖ \${key}: \${template.title}\`);
              }
              
              console.log('‚úÖ Registry validation passed');
            }).catch(err => {
              console.error('‚ùå Registry validation failed:', err);
              process.exit(1);
            });
          "

  size-impact:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build current branch
        run: npm run build

      - name: Calculate bundle size impact
        run: |
          # Calculate current build size
          CURRENT_SIZE=$(du -sb dist/ | cut -f1)

          # Store current branch name
          CURRENT_BRANCH=$(git branch --show-current)

          # Checkout main and build
          git stash push -m "temp stash for size comparison" || true
          git checkout origin/main
          npm ci
          npm run build
          MAIN_SIZE=$(du -sb dist/ | cut -f1)

          # Return to original branch
          git checkout "$CURRENT_BRANCH" || git checkout -
          git stash pop || true

          # Calculate difference
          SIZE_DIFF=$((CURRENT_SIZE - MAIN_SIZE))
          SIZE_DIFF_KB=$((SIZE_DIFF / 1024))

          echo "üì¶ Bundle size impact:"
          echo "Main branch: $(numfmt --to=iec $MAIN_SIZE)"
          echo "This PR: $(numfmt --to=iec $CURRENT_SIZE)"
          echo "Difference: $(numfmt --to=iec $SIZE_DIFF) (${SIZE_DIFF_KB}KB)"

          # Warn if size increase is significant
          if [ $SIZE_DIFF_KB -gt 100 ]; then
            echo "‚ö†Ô∏è This PR increases bundle size by more than 100KB"
            echo "Please review if this increase is justified"
          fi

  dependency-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Check for new dependencies
        run: |
          if git diff --name-only origin/main...HEAD | grep -E "(package\.json|package-lock\.json)" > /dev/null; then
            echo "üì¶ Package changes detected"
            
            # Install and check for vulnerabilities
            npm ci
            
            echo "üîç Running security audit..."
            
            # Run audit with known exceptions handling
            npm audit --audit-level=moderate --json > pr_audit.json || true
            
            if [ -f pr_audit.json ]; then
              VULN_COUNT=$(cat pr_audit.json | jq -r '.metadata.vulnerabilities.total // 0')
              
              if [ "$VULN_COUNT" -gt 0 ]; then
                echo "‚ö†Ô∏è Found $VULN_COUNT vulnerabilities in dependencies"
                
                # Check for runtime vulnerabilities (excluding known pkg issue)
                cat pr_audit.json | jq -r '.vulnerabilities | to_entries[] | "\(.key): \(.value.severity) - \(.value.title)"' > pr_vulns.txt
                RUNTIME_VULNS=$(grep -v "pkg.*Local Privilege Escalation" pr_vulns.txt | wc -l || echo "0")
                
                echo "üìã Vulnerability analysis:"
                cat pr_vulns.txt
                
                if [ "$RUNTIME_VULNS" -gt 0 ]; then
                  echo ""
                  echo "‚ùå This PR introduces runtime security vulnerabilities!"
                  echo "Please fix these vulnerabilities before merging:"
                  grep -v "pkg.*Local Privilege Escalation" pr_vulns.txt || true
                  exit 1
                else
                  echo ""
                  echo "‚úÖ Only known build-time vulnerabilities present (pkg)"
                  echo "These don't affect runtime security. See SECURITY_ADVISORY.md for details."
                fi
              else
                echo "‚úÖ No new vulnerabilities detected"
              fi
            else
              echo "‚ö†Ô∏è Could not parse audit results, running basic check"
              npm audit --audit-level=high
            fi
            
            echo ""
            echo "üìã Checking for outdated dependencies..."
            npm outdated || true
            
            echo "‚úÖ Dependency check completed"
          else
            echo "‚ÑπÔ∏è No package changes detected"
          fi
